
2nd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f8  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c9  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000312  00000000  00000000  00000f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000336  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 57 00 	call	0xae	; 0xae <main>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <game_logic>:
unsigned char temp;
unsigned char value;
unsigned int result;

int game_logic (void){
	if(value<temp)
  7c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <value>
  80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  84:	98 17       	cp	r25, r24
  86:	28 f0       	brcs	.+10     	; 0x92 <game_logic+0x16>
	  return -1;
	if(value>temp)
  88:	89 17       	cp	r24, r25
  8a:	30 f0       	brcs	.+12     	; 0x98 <game_logic+0x1c>
	   return -1;
	if(value==temp)
  8c:	98 17       	cp	r25, r24
  8e:	39 f0       	breq	.+14     	; 0x9e <game_logic+0x22>
	   return 0;
}
  90:	08 95       	ret
unsigned char value;
unsigned int result;

int game_logic (void){
	if(value<temp)
	  return -1;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	9f ef       	ldi	r25, 0xFF	; 255
  96:	08 95       	ret
	if(value>temp)
	   return -1;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	9f ef       	ldi	r25, 0xFF	; 255
  9c:	08 95       	ret
	if(value==temp)
	   return 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
}
  a2:	08 95       	ret

000000a4 <config_periferals>:

void config_periferals(void){
	DDRD=0x00; //switches
  a4:	11 ba       	out	0x11, r1	; 17
	DDRB=0xFF; //leds
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;  //portc7
  aa:	84 bb       	out	0x14, r24	; 20
  ac:	08 95       	ret

000000ae <main>:
}


int main(void)
{
	config_periferals();
  ae:	0e 94 52 00 	call	0xa4	; 0xa4 <config_periferals>
	
    /* Replace with your application code */
    while (1) {
	    PORTC=0x00;
  b2:	15 ba       	out	0x15, r1	; 21
		temp=PIND;
  b4:	80 b3       	in	r24, 0x10	; 16
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		PORTB=temp;   //get number and copy it in portb
  ba:	88 bb       	out	0x18, r24	; 24
		PORTC=0x80;
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	85 bb       	out	0x15, r24	; 21
		
		
		if(PORTC==0x80){       // if number enterd by 2nd user
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	80 38       	cpi	r24, 0x80	; 128
  c4:	b1 f7       	brne	.-20     	; 0xb2 <main+0x4>
  c6:	3f c0       	rjmp	.+126    	; 0x146 <main+0x98>
			for(int i=0; i<10; i++){
				value=PIND;
  c8:	80 b3       	in	r24, 0x10	; 16
  ca:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <value>
				         PORTC=0x80;
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	85 bb       	out	0x15, r24	; 21
				         PORTC=0x00;  //h-l-H
  d2:	15 ba       	out	0x15, r1	; 21
				         PORTC=0x80;
  d4:	85 bb       	out	0x15, r24	; 21
				result=game_logic();  // get result
  d6:	0e 94 3e 00 	call	0x7c	; 0x7c <game_logic>
  da:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <result+0x1>
  de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <result>
				if(result== -1){
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	11 f4       	brne	.+4      	; 0xea <main+0x3c>
					PORTB=0x0F;}     //glow 0-4 of portb
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	88 bb       	out	0x18, r24	; 24
				if(result== 1){
  ea:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <result>
  ee:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <result+0x1>
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x4c>
				    PORTB=0xF0;}       //glow 4-7 of portb
  f6:	80 ef       	ldi	r24, 0xF0	; 240
  f8:	88 bb       	out	0x18, r24	; 24
				if(result== 0){
  fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <result>
  fe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <result+0x1>
 102:	89 2b       	or	r24, r25
 104:	f1 f4       	brne	.+60     	; 0x142 <main+0x94>
				     PORTB=0xFF;      //glow all of portb
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	99 e6       	ldi	r25, 0x69	; 105
 10e:	28 e1       	ldi	r18, 0x18	; 24
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x62>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x6c>
 11a:	00 00       	nop
				     _delay_ms(1000);
					  PORTB=0x00;       // glow with freq of 0.5hz
 11c:	18 ba       	out	0x18, r1	; 24
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	99 e6       	ldi	r25, 0x69	; 105
 122:	28 e1       	ldi	r18, 0x18	; 24
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x76>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x80>
 12e:	00 00       	nop
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	91 e1       	ldi	r25, 0x11	; 17
 134:	2a e7       	ldi	r18, 0x7A	; 122
 136:	81 50       	subi	r24, 0x01	; 1
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	20 40       	sbci	r18, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x88>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x92>
 140:	00 00       	nop
		PORTB=temp;   //get number and copy it in portb
		PORTC=0x80;
		
		
		if(PORTC==0x80){       // if number enterd by 2nd user
			for(int i=0; i<10; i++){
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	02 c0       	rjmp	.+4      	; 0x14a <main+0x9c>
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	ca 30       	cpi	r28, 0x0A	; 10
 14c:	d1 05       	cpc	r29, r1
 14e:	0c f4       	brge	.+2      	; 0x152 <main+0xa4>
 150:	bb cf       	rjmp	.-138    	; 0xc8 <main+0x1a>
 152:	af cf       	rjmp	.-162    	; 0xb2 <main+0x4>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
